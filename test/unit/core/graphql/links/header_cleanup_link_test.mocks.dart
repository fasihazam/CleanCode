// Mocks generated by Mockito 5.4.4 from annotations
// in maple_harvest_app/test/unit/core/graphql/links/header_cleanup_link_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:gql_exec/gql_exec.dart' as _i4;
import 'package:gql_exec/src/context.dart' as _i3;
import 'package:gql_exec/src/operation.dart' as _i2;
import 'package:maple_harvest_app/core/core.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOperation_0 extends _i1.SmartFake implements _i2.Operation {
  _FakeOperation_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContext_1 extends _i1.SmartFake implements _i3.Context {
  _FakeContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequest_2 extends _i1.SmartFake implements _i4.Request {
  _FakeRequest_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HeaderManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockHeaderManager extends _i1.Mock implements _i5.HeaderManager {
  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  void updateHeaders(Map<String, String>? newHeaders) => super.noSuchMethod(
        Invocation.method(
          #updateHeaders,
          [newHeaders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetHeaders() => super.noSuchMethod(
        Invocation.method(
          #resetHeaders,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool validateHeaders(Map<String, String>? headers) => (super.noSuchMethod(
        Invocation.method(
          #validateHeaders,
          [headers],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String sanitizeHeaderValue(String? value) => (super.noSuchMethod(
        Invocation.method(
          #sanitizeHeaderValue,
          [value],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #sanitizeHeaderValue,
            [value],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #sanitizeHeaderValue,
            [value],
          ),
        ),
      ) as String);
}

/// A class which mocks [Request].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockRequest extends _i1.Mock implements _i4.Request {
  @override
  _i2.Operation get operation => (super.noSuchMethod(
        Invocation.getter(#operation),
        returnValue: _FakeOperation_0(
          this,
          Invocation.getter(#operation),
        ),
        returnValueForMissingStub: _FakeOperation_0(
          this,
          Invocation.getter(#operation),
        ),
      ) as _i2.Operation);

  @override
  Map<String, dynamic> get variables => (super.noSuchMethod(
        Invocation.getter(#variables),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Context get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeContext_1(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.Context);

  @override
  _i4.Request withContextEntry<T extends _i3.ContextEntry>(T? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #withContextEntry,
          [entry],
        ),
        returnValue: _FakeRequest_2(
          this,
          Invocation.method(
            #withContextEntry,
            [entry],
          ),
        ),
        returnValueForMissingStub: _FakeRequest_2(
          this,
          Invocation.method(
            #withContextEntry,
            [entry],
          ),
        ),
      ) as _i4.Request);

  @override
  _i4.Request updateContextEntry<T extends _i3.ContextEntry>(
          _i3.ContextUpdater<T?>? update) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContextEntry,
          [update],
        ),
        returnValue: _FakeRequest_2(
          this,
          Invocation.method(
            #updateContextEntry,
            [update],
          ),
        ),
        returnValueForMissingStub: _FakeRequest_2(
          this,
          Invocation.method(
            #updateContextEntry,
            [update],
          ),
        ),
      ) as _i4.Request);
}

/// A class which mocks [Context].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockContext extends _i1.Mock implements _i3.Context {
  @override
  _i3.Context withEntry<T extends _i3.ContextEntry>(T? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #withEntry,
          [entry],
        ),
        returnValue: _FakeContext_1(
          this,
          Invocation.method(
            #withEntry,
            [entry],
          ),
        ),
        returnValueForMissingStub: _FakeContext_1(
          this,
          Invocation.method(
            #withEntry,
            [entry],
          ),
        ),
      ) as _i3.Context);

  @override
  _i3.Context updateEntry<T extends _i3.ContextEntry>(
          _i3.ContextUpdater<T?>? update) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEntry,
          [update],
        ),
        returnValue: _FakeContext_1(
          this,
          Invocation.method(
            #updateEntry,
            [update],
          ),
        ),
        returnValueForMissingStub: _FakeContext_1(
          this,
          Invocation.method(
            #updateEntry,
            [update],
          ),
        ),
      ) as _i3.Context);
}

/// A class which mocks [HttpLinkResponseContext].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockHttpLinkResponseContext extends _i1.Mock
    implements _i4.HttpLinkResponseContext {
  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<Object?> get fieldsForEquality => (super.noSuchMethod(
        Invocation.getter(#fieldsForEquality),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);
}
